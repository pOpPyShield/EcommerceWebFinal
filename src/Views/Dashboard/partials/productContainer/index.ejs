<div class="card shadow mb-4">
    <div class="card-header py-3">
        <a class="show-add-form-category" href="#" data-toggle="modal" data-target="#exampleModalAdd"><button
                class="btn btn-primary">Add product</button></a>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Price</th>
                        <th>Description</th>
                        <th>Quantity</th>
                        <th>Created day</th>
                        <th>Updated day</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Price</th>
                        <th>Description</th>
                        <th>Quantity</th>
                        <th>Created day</th>
                        <th>Updated day</th>
                    </tr>
                </tfoot>
                <tbody>
                    <% products.forEach(function(prod){ %>
                        <tr>
                            <td><a data-productid="<%=prod.id%>" data-target="#exampleModal" data-categoryid="<%=prod.Category.id%>" data-price="<%=prod.price%>" data-sizequant="<%=JSON.stringify(prod.ProductSizes)%>" data-description="<%=prod.description%>"class="show-form-product" href="#" data-toggle="modal" data-target="#exampleModal"><%=prod.name%></a></td>
                            <td><%=prod.Category.name%></td>
                            <td class="product-price-display"><%=prod.price%></td>
                            <td><%=prod.description%></td>
                            <td><%=prod.SizeQuant.sum%></td>
                            <td><%=prod.createdAt%></td>
                            <td><%=prod.updatedAt%></td>
                            <input type="hidden" id="imageProduct" value="<%=prod.Images[0] != null ? prod.Images[0].path : ''%>">
                        </tr>
                        <%});%>
                </tbody>
            </table>
        </div>
    </div>
</div>
<!--Modal Update, Delete function -->
<div class="modal fade bd-example-modal-lg" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabelUpdateDelete"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title update-delete-product" id="exampleModalLabelUpdateDelete">Modal title</h5>
                <button type="button" class="close btn-close-cate" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Product name</label>
                    <input type="text" class="form-control" id="updateDeleteProdName" placeholder="Enter product name">
                </div>
                <div class="form-group">
                    <label>Category</label>
                    <select class="form-control" id="select-category-update-delete">
                        <% categories.forEach(function(cat){ %>
                            <option value="<%=cat.id%>"><%=cat.name%> <%=cat.Gender.name%></option>
                        <% });%>
                    </select>
                </div>
                <div class="form-group">
                    <label>Price</label>
                    <input type="text" class="form-control" id="updateDeletePrice" placeholder="Enter product price">
                </div>
                <div class="form-group mb-2" id="size-quant-parent-update-delete">
                    <!-- Render base on the productsize that has in one particular product
                    <div class="size-quant">
                        <div class="size">
                            <label>Size</label>
                            <input type="text" class="form-control size-input" placeholder="Enter product size">
                        </div>
                        <div class="quantity">
                            <label>Quantity</label>
                            <input type="text" class="form-control quant-input" placeholder="Enter product quantity">
                        </div>
                    </div>-->
                </div>
                <div class="add-size-btn">
                    <input type="submit" name="addMoreSize" value="+" class="btn btn-success rounded-circle"
                        data-dismiss="modal" id="addSizeUpdateDelete">
                </div>
                <div class="form-group">
                    <label for="description" class="col-form-label">Description</label>
                    <textarea class="form-control" id="description-update-delete" rows="5"></textarea>
                </div>
                <div class="form-group">
                    <div class="drop-zone update-delete-prod-image">
                        <span class="drop-zone__prompt">Drop file here or click to upload</span>
                        <input type="file" name="myCatFile" class="drop-zone__input">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger action-delete" data-dismiss="modal">Delete</button>
                <button type="button" class="btn btn-primary action-update">Save changes</button>
            </div>
        </div>
    </div>
</div>
<!-- Large modal -->
<div class="modal fade bd-example-modal-lg" id="exampleModalAdd"tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title add-product" id="exampleModalLabel">Add Product</h5>
                <button type="button" class="close btn-close-cate" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="exampleName">Product name</label>
                    <input type="text" class="form-control" id="exampleName" placeholder="Enter product name">
                </div>
                <div class="form-group">
                    <label for="select-category-add">Category</label>
                    <select class="form-control" id="select-category-add">
                        <% categories.forEach(function(cat){ %>
                            <option value="<%=cat.id%>"><%=cat.name%> <%=cat.Gender.name%></option>
                            <% });%>
                    </select>
                </div>
                <div class="form-group">
                    <label for="examplePrice">Price</label>
                    <input type="text" class="form-control" id="examplePrice" placeholder="Enter product price">
                </div>
                <div class="form-group mb-2" id="size-quant-parent">
                    <div class="size-quant">
                        <div class="size">
                            <label>Size</label>
                            <input type="text" class="form-control size-input" placeholder="Enter product size">
                        </div>
                        <div class="quantity">
                            <label>Quantity</label>
                            <input type="text" class="form-control quant-input" placeholder="Enter product quantity">
                        </div>
                    </div>
                </div>
                <div class="add-size-btn">
                    <input type="submit" name="addMoreSize" value="+" class="btn btn-success rounded-circle"
                        data-dismiss="modal" id="addSize">
                </div>
                <div class="form-group">
                    <label for="description" class="col-form-label">Description</label>
                    <textarea class="form-control" id="description" rows="5"></textarea>
                </div>
                <div class="form-group">
                    <div class="drop-zone create-prod-image">
                        <span class="drop-zone__prompt">Drop file here or click to upload</span>
                        <input type="file" name="myCatFile" class="drop-zone__input">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <input type="submit" name="insertProduct" value="Add" class="btn btn-success action-add"
                    data-dismiss="modal"></input>
            </div>
        </div>
    </div>
</div>
<script>

    $(document).ready(function () {
        // Add the event listerner to add button in form update, delete
        document.getElementById("addSizeUpdateDelete").addEventListener('click', (evt) => {
            evt.preventDefault()
            evt.stopPropagation()
            document.getElementById("size-quant-parent-update-delete").append(addSizeDiv())
            addParseInt()
        })
        // Add event key up in price input field to add commas when user type in updateDelete form
        document.getElementById('updateDeletePrice').addEventListener('keyup', function(evt) {
            n = parseInt(this.value.replace(/\D/g, ''), 10) || '';
            document.getElementById('updateDeletePrice').value = n.toLocaleString();
        }, false)
        //Display price with comma
        $('.product-price-display').each(function() {
            let columnPrice = $(this).html()
            let addCommas = parseInt(columnPrice.replace(/\D/g, ''), 10).toLocaleString() || ''
            $(this).html(addCommas)
        })
        //Click to display form update, delete
        $('.show-form-product').on('click', (event) => {
            event.preventDefault()
            let imageProduct= $('#imageProduct').val()
            //Product name
            let productTitle = $(event.target).text()
            $('.update-delete-product').text(productTitle)
            $('#updateDeleteProdName').val(productTitle)
            //Category selected
            $("#select-category-update-delete").val($(event.target).attr("data-categoryid"))
            //Price
            //1. Add comma in price input field
            let productPrice = $(event.target).attr("data-price")
            let addCommas = parseInt(productPrice.replace(/\D/g, ''), 10).toLocaleString() || ''
            $('#updateDeletePrice').val(addCommas)
            //Size
            //1. Render the input sizes, quantitys
            renderTheInputQuantity($(event.target).attr("data-sizequant"))
            //Description
            $("#description-update-delete").val($(event.target).attr("data-description"))
            //File
            let imageValue = event.currentTarget.parentElement.parentElement.querySelector('#imageProduct')
            if (!(imageValue.value == '')) {
                $('.drop-zone__prompt').remove()
                let thumbnailElement = document.querySelector('.drop-zone__thumb')
                if (!thumbnailElement) {
                    thumbnailElement = document.createElement("div")
                    thumbnailElement.classList.add("drop-zone__thumb")
                    $('.update-delete-prod-image').append(thumbnailElement)
                    thumbnailElement.dataset.label = imageValue.value
                    thumbnailElement.style.backgroundImage = `url('${"/imgs/ProductImg/"+imageValue.value}')`
                }
            }
            //Update data
            let id = $(event.target).attr("data-productid")
            let fileName, fileData, ext
            $('.update-delete-prod-image').on('drop', (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (e.originalEvent.dataTransfer && e.originalEvent.dataTransfer.files.length) {
                    /*UPLOAD FILES HERE*/
                    let lengthFiles = e.originalEvent.dataTransfer.files.length
                    $('.drop-zone__input').files = e.originalEvent.dataTransfer.files[lengthFiles - 1]
                    fileName =updateThumbNail($('.update-delete-prod-image'), e.originalEvent.dataTransfer.files[lengthFiles - 1], id)
                    ext = getFileExtension(e.originalEvent.dataTransfer.files[lengthFiles - 1].name)
                    e.originalEvent.dataTransfer.files[lengthFiles - 1].name = fileName
                    fileType = e.originalEvent.dataTransfer.files[lengthFiles - 1].type
                    fileData = e.originalEvent.dataTransfer.files[lengthFiles - 1]
                }
                $('.drop-zone').removeClass('drop-zone--over')
            })
            $('.action-update').on('click', (e) => {
                //var newName = document.getElementById("exampleInputUpdateDelete").value
                //console.log(newName)
                //updateGender(name,newName, fileData, fileName, "/gender/update")
                updateProduct(id,
                                productTitle,
                                $('#updateDeleteProdName').val(), 
                                $('#select-category-update-delete').val(), 
                                $('#updateDeletePrice').val(), createDictSizeQuantUpdateDelete(), 
                                $('#description-update-delete').val(), 
                                fileData, 
                                fileName+"."+ext)
            })
            console.log(imageProduct,productTitle, $(event.target).attr("data-categoryid"), imageValue.value)
        })
        //Cast to decimal in price
        var fnf = document.getElementById("examplePrice");
        var n;
        //Add more size and quant
        var btnAddSize = document.getElementById("addSize")
        var sizeQuantParent = document.getElementById("size-quant-parent")
        //File manipulation
        var fileName, fileData;
        fnf.addEventListener('keyup', function (evt) {
            n = parseInt(this.value.replace(/\D/g, ''), 10) || '';
            fnf.value = n.toLocaleString();
        }, false);
        addParseInt()
        btnAddSize.addEventListener('click', (evt) => {
            evt.preventDefault()
            evt.stopPropagation()
            sizeQuantParent.append(addSizeDiv())
            addParseInt()
        })
        $('.btn-close-cate').on('click', (evt) => {
            $("#exampleName").val("")
            $("#examplePrice").val("")
            $("#description").val("")
            clearSizeQuantInp()
            $('#size-quant-parent').children().not(':first-child').remove()
            clearThumb()
        })
        //Drop file zone
        $('.drop-zone').on('dragover', (e) => {
            e.preventDefault()
            $('.drop-zone').addClass("drop-zone--over")
        });
        ["dragleave", "dragend"].forEach(type => {
            $('.drop-zone').on(type, (e) => {
                $('.drop-zone').removeClass("drop-zone--over")
            })
        })
        $('.create-prod-image').on('drop', (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (e.originalEvent.dataTransfer && e.originalEvent.dataTransfer.files.length) {
                /*UPLOAD FILES HERE*/
                let lengthFiles = e.originalEvent.dataTransfer.files.length
                $('.drop-zone__input').files = e.originalEvent.dataTransfer.files[lengthFiles - 1]
                fileName = updateThumbNail($('.create-prod-image'), e.originalEvent.dataTransfer.files[lengthFiles - 1], '')
                fileData = e.originalEvent.dataTransfer.files[lengthFiles - 1]
            }
            $('.drop-zone').removeClass('drop-zone--over')
        })
        //Send data to server
        $('.action-add').on('click', (e) => {            console.log(fileName, fileData, ext)
            //console.log($('#select-category-add').val())
            sendProduct($("#exampleName").val(), $("#select-category-add").val(), $("#examplePrice").val(), createDictSizeQuant(), $("#description").val(), fileData, fileName + "." + getFileExtension(fileData.name))
        })

    })
    function createDictSizeQuantUpdateDelete() {
        var dict = {};
        $('#size-quant-parent-update-delete .size-quant').each((i, val) => {
            let childRenIdx = 0
            dict[i] = {
                "Size": val.children[childRenIdx].children[1].value,
                "Quantity": val.children[++childRenIdx].children[1].value
            }
        })
        return dict;
    }
    function updateProduct(id, oldName, newName, category, price, dictSizeQuant, description, img, imgName) {
            console.log(id, newName, category, price, dictSizeQuant, description, img, imgName)
            const formData = new FormData()
            if(img!=null){
                formData.append('id', id)
                formData.append('oldName', oldName)
                formData.append('name', newName)
                formData.append('category', category)
                formData.append('price', price)
                formData.append('dictSizeQuant', JSON.stringify(dictSizeQuant))
                formData.append('description', description)
                formData.append('myFile', img, imgName)
            } else {
                formData.append('id', id)
                formData.append('oldName', oldName)
                formData.append('name', newName)
                formData.append('category', category)
                formData.append('price', price)
                formData.append('dictSizeQuant', JSON.stringify(dictSizeQuant))
                formData.append('description', description)
            }
            (async() =>{
                var options = {
                    method: 'POST',
                    body: formData,
                }
                await fetch("/product/update", options)
                        .then((res) => res.json())
                        .then((resp) => {
                            if (resp.errors) {
                                Swal.fire({
                                    title: "Errors",
                                    text: resp.errors[resp.errors.length - 1].message,
                                    icon: "error",
                                    confirmButtonText: "Ok"
                                })
                            } else {
                                console.log("Update info success")
                                Swal.fire({
                                    title: "Success",
                                    text: resp.operation + " " + resp.result + " gender",
                                    icon: "success",
                                    confirmButtonText: 'Ok',
                                }).then((result) => {
                                    document.querySelector(".modal-backdrop").remove()
                                    $.get('/product', (html) => {
                                        $(".container-fluid").html(html)
                                    })
                                })
                            }
                        })
                        .catch((err) => {
                            console.log(err)
                        })
            })()
    }
    function addSizeDivUpdateDelete(sizeString, quantityString) {
        //Create SizeQuant div
        let sizeQuantGroup = document.createElement("div")
        sizeQuantGroup.setAttribute("class", "size-quant")

        //Create size div
        let sizeGroup = document.createElement("div")
        sizeGroup.setAttribute("class", "size")
        //Create size label
        let sizeLabel = document.createElement("label")
        sizeLabel.innerText = "Size"
        //Create size input
        let sizeInp = document.createElement("input")
        sizeInp.setAttribute("type", "text")
        sizeInp.setAttribute("class", "form-control size-input")
        sizeInp.setAttribute("placeholder", "Enter product size")
        sizeInp.value = sizeString
        //apeend size label, input to sizeGroup 
        sizeGroup.append(sizeLabel)
        sizeGroup.append(sizeInp)
        //append sizegroup to size quant
        sizeQuantGroup.append(sizeGroup)

        //Create quantity div
        let quantityGroup = document.createElement("div")
        quantityGroup.setAttribute("class", "quantity")
        //Create quantity label
        let quantityLabel = document.createElement("label")
        quantityLabel.innerText = "Quantity"
        //Create quantity input
        let quantityInp = document.createElement("input")
        quantityInp.setAttribute("type", "text")
        quantityInp.setAttribute("class", "form-control quant-input")
        quantityInp.setAttribute("placeholder", "Enter product quant")
        quantityInp.value = quantityString
        //append quantity label, input to quantity group 
        quantityGroup.append(quantityLabel)
        quantityGroup.append(quantityInp)
        //append quantity group to sizequant
        sizeQuantGroup.append(quantityGroup)
        return sizeQuantGroup
    }
    function appendToUpdateDeleteForm(sizeString, quantityString) {
        let sizeQuantParentUpdateDelete = document.getElementById("size-quant-parent-update-delete")
        sizeQuantParentUpdateDelete.append(addSizeDivUpdateDelete(sizeString, quantityString))
    }
    function renderTheInputQuantity(quantSizeObjs) {
        //Clear before render
        let sizeQuantParentUpdateDelete = document.getElementById("size-quant-parent-update-delete")
        sizeQuantParentUpdateDelete.innerHTML =''
        //Render
        let parseJson = JSON.parse(quantSizeObjs)
        for(var size of parseJson) {
            appendToUpdateDeleteForm(size.size, size.quantity)
        }
    }
    function createDictSizeQuant() {
        var dict = {};
        $('.size-quant').each((i, val) => {
            let childRenIdx = 0
            dict[i] = {
                "Size": val.children[childRenIdx].children[1].value,
                "Quantity": val.children[++childRenIdx].children[1].value
            }
        })
        return dict;
    }
    function sendProduct(name, category, price, dictSizeQuant, description, img, imgName) {
        (async () => {
            const formData = new FormData()
            formData.append('name', name)
            formData.append('category', category)
            formData.append('price', price)
            formData.append('dictSizeQuant', JSON.stringify(dictSizeQuant))
            formData.append('description', description)
            formData.append('myFile', img, imgName)
            var options = {
                method: 'POST',
                body: formData,

            }
            await fetch("/product/create", options)
                .then((res) => res.json())
                .then((resp) => {
                    if (resp.errors) {
                        Swal.fire({
                            title: "Errors",
                            text: resp.errors[resp.errors.length - 1].message,
                            icon: "error",
                            confirmButtonText: "Ok"
                        })
                    } else {
                        console.log("Upload info success")
                        Swal.fire({
                            title: "Success",
                            text: resp.operation + " " + resp.result + " product",
                            icon: "success",
                            confirmButtonText: 'Ok',
                        }).then((result) => {
                            $.get('/product', (html) => {
                                $(".container-fluid").html(html)
                            })
                        })
                    }
                })
                .catch((err) => {
                    console.log(err)
                })
        })()
    }
    function clearThumb() {
        let thumb = document.querySelector('.drop-zone__thumb')
        if (thumb) {
            thumb.remove()
            let prompt = document.createElement('span')
            prompt.classList.add('drop-zone__prompt')
            prompt.innerHTML = "Drop file here or click to upload"
            $('.drop-zone').prepend(prompt)
        }
    }
    function clearSizeQuantInp() {
        $(".size-input").each((i, val) => {
            if (val.value.length > 0) {
                val.value = ''
            }
        })
        $(".quant-input").each((i, val) => {
            if (val.value.length > 0) {
                val.value = ''
            }
        })
    }
    function getFileExtension(url) {
        return url.split('.').pop()
    }
    function getNameImage(url) {
        return url.split('.').slice(0, -1).join('.')
    }
    function encryptUrl(arr) {
        return arr.join("_")
    }
    function updateThumbNail(dropZoneElement, file, label) {
        if (file.type.startsWith("image/")) {
            let thumbnailElement = document.querySelector('.drop-zone__thumb')
            // First time - remove the prompt
            if (dropZoneElement.has(".drop-zone__prompt")) {
                $(".drop-zone__prompt").remove();
            }
            // Second time - there is no thumbnail element, so create it 
            if (!thumbnailElement) {
                thumbnailElement = document.createElement("div")
                thumbnailElement.classList.add("drop-zone__thumb")
                dropZoneElement.append(thumbnailElement);
            }
            thumbnailElement.dataset.label = file.name
            //Show thumbnail for image files
            const reader = new FileReader();
            reader.readAsDataURL(file)
            reader.onload = () => {
                thumbnailElement.style.backgroundImage = `url('${reader.result}')`;
            }
            if (label) {
                return encryptUrl([getNameImage(file.name), file.lastModified.toString(), file.size.toString(), label])
            } else {
                return encryptUrl([getNameImage(file.name), file.lastModified.toString(), file.size.toString()])
            }
        } else {
            Swal.fire({
                title: "Accept image file only!",
                text: "Please check the file is image!",
                icon: "warning",
                button: "Ok"
            })
        }
    }
    function addParseInt() {
        //Cast to number only
        var quantSelect = document.getElementsByClassName("quant-input")
        var q;
        for (let i = 0; i < quantSelect.length; i++) {
            quantSelect[i].addEventListener('keyup', function (evt) {
                q = parseInt(this.value.replace(/\D/g, ''), 10) || ''
                quantSelect[i].value = q.toLocaleString()
            }, false)
        }
    }
    function addSizeDiv() {
        //Create SizeQuant div
        let sizeQuantGroup = document.createElement("div")
        sizeQuantGroup.setAttribute("class", "size-quant")

        //Create size div
        let sizeGroup = document.createElement("div")
        sizeGroup.setAttribute("class", "size")
        //Create size label
        let sizeLabel = document.createElement("label")
        sizeLabel.innerText = "Size"
        //Create size input
        let sizeInp = document.createElement("input")
        sizeInp.setAttribute("type", "text")
        sizeInp.setAttribute("class", "form-control size-input")
        sizeInp.setAttribute("placeholder", "Enter product size")
        //apeend size label, input to sizeGroup 
        sizeGroup.append(sizeLabel)
        sizeGroup.append(sizeInp)
        //append sizegroup to size quant
        sizeQuantGroup.append(sizeGroup)

        //Create quantity div
        let quantityGroup = document.createElement("div")
        quantityGroup.setAttribute("class", "quantity")
        //Create quantity label
        let quantityLabel = document.createElement("label")
        quantityLabel.innerText = "Quantity"
        //Create quantity input
        let quantityInp = document.createElement("input")
        quantityInp.setAttribute("type", "text")
        quantityInp.setAttribute("class", "form-control quant-input")
        quantityInp.setAttribute("placeholder", "Enter product quant")
        //append quantity label, input to quantity group 
        quantityGroup.append(quantityLabel)
        quantityGroup.append(quantityInp)
        //append quantity group to sizequant
        sizeQuantGroup.append(quantityGroup)
        return sizeQuantGroup
    }
</script>